syntax = "proto3";

package cache;

message Void {}

message Cache {
    string jsonData = 1;
}

message EntityKey {
    string entityName = 1;
    string entityId = 2;
}

message SetEntityByKey {
    EntityKey entityKey = 1;
    string jsonData = 2;
    optional int32 ttl = 3;
}

service EntitiesCacheService {
    rpc getEntityByKey(EntityKey) returns (Cache) {}
    rpc setEntityByKey(SetEntityByKey) returns (Void) {}
    rpc delEntityByKey(EntityKey) returns (Void) {}
}

message DoesUserHavePermissionRequest {
    string userId = 1;
    string projectId = 2;
    int32 permissionId = 3;
}

message AddPermissionsToUserRequest {
    string userId = 1;
    string projectId = 2;
    optional string roleId = 3;
    int32 permissionId = 4;
}

message RemovePermissionsFromRoleRequest {
    string roleId = 1;
    repeated int32 permissionsIds = 2;
}

message RemovePermissionsFromUserRequest {
    string userId = 1;
    repeated int32 permissionsIds = 2;
}

message RemoveRolesFromUserRequest {
    string userId = 1;
    repeated string rolesIds = 2;
}

message Bool {
    optional bool bool = 1;
}

message RoleId {
    string roleId = 1;
}

service PermissionsCacheService {
    rpc doesUserHavePermission(DoesUserHavePermissionRequest) returns (Bool) {}
    rpc addPermissionToUserInProject(AddPermissionsToUserRequest) returns (Void) {}
    rpc removePermissionsFromUser(RemovePermissionsFromRoleRequest) returns (Void) {}
    rpc removePermissionsFromRole(RemovePermissionsFromRoleRequest) returns (Void) {}
    rpc removeRolesFromUser(RemoveRolesFromUserRequest) returns (Void) {}
    rpc deleteRole(RoleId) returns (Void) {}
}