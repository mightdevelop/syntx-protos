syntax = "proto3";

package eventbus;

import "google/protobuf/empty.proto";
import "common.proto";

message Project {
    optional string id = 1;
    optional string email = 2;
    optional string name = 3;
    optional string password = 4;
    optional string salt = 5;
}

message ProjectEvent {
    optional Error error = 1;
    Project project = 2;
}

message AddOrRemoveUserFromProjectEvent {
    optional Error error = 1;
    string projectId = 2;
    string userId = 3;
}

message IsUserProjectParticipantEvent {
    optional Error error = 1;
    string projectId = 2;
    string userId = 3;
    bool bool = 4;
}

message SearchProjectsParams {
    optional string boardId = 1;
    repeated string projectsIds = 2;
    optional int32 limit = 3;
    optional int32 offset = 4;
}

message SearchProjectsEvent {
    optional Error error = 1;
    SearchProjectsParams searchParams = 2;
    repeated Project projects = 3;
}

service ProjectsEventsService {
    rpc getProjectByIdEvent(ProjectEvent) returns (google.protobuf.Empty) {}
    rpc searchProjectsEvent(SearchProjectsEvent) returns (google.protobuf.Empty) {}
    rpc isUserProjectParticipantEvent(IsUserProjectParticipantEvent) returns (google.protobuf.Empty) {}
    rpc createProjectEvent(ProjectEvent) returns (google.protobuf.Empty) {}
    rpc updateProjectEvent(ProjectEvent) returns (google.protobuf.Empty) {}
    rpc deleteProjectEvent(ProjectEvent) returns (google.protobuf.Empty) {}
    rpc addUserToProject(AddOrRemoveUserFromProjectEvent) returns (google.protobuf.Empty) {}
    rpc removeUserFromProject(AddOrRemoveUserFromProjectEvent) returns (google.protobuf.Empty) {}
}

message Invite {
    optional string id = 1;
    optional string userId = 2;
    optional string projectId = 3;
}

message InviteEvent {
    optional Error error = 1;
    Invite invite = 2;
}

message ProjectIdAndUserIdEvent {
    optional Error error = 1;
    string userId = 2;
    string projectId = 3;
}

message SearchInvitesParams {
    optional string userId = 1;
    optional string projectId = 2;
    repeated string invitesIds = 3;
    optional int32 limit = 4;
    optional int32 offset = 5;
}

message SearchInvitesEvent {
    optional Error error = 1;
    SearchInvitesParams searchParams = 2;
    repeated Invite invites = 3;
}

service InvitesEventsService {
    rpc getInviteByIdEvent(InviteEvent) returns (Invite) {}
    rpc searchInvitesEvent(SearchInvitesParams) returns (stream Invite) {}
    rpc createInviteEvent(InviteEvent) returns (Invite) {}
    rpc deleteInviteByIdEvent(InviteEvent) returns (Invite) {}
    rpc deleteInviteByUserIdAndProjectIdEvent(ProjectIdAndUserIdEvent) returns (Invite) {}
}